# this was automatically generated by the FlatBuffers compiler,
# but then hacked to work around the circular type definitions
# in the example code by using type parameters.

# module: Example

import ..InParentNamespace
import FlatBuffers

FlatBuffers.@with_kw mutable struct Monster{T}
#=
#  an example documentation comment: monster object
=#
    pos::Union{Vec3, Nothing} = nothing
    mana::Int16 = 150
    hp::Int16 = 100
    name::String = ""
    inventory::Vector{UInt8} = []
    color::Int8 = 8
    test_type::UInt8 = 0
    test::T = nothing
    test4::Vector{Test} = []
    testarrayofstring::Vector{String} = []
#=
#  an example documentation comment: this will end up in the generated code
#  multiline too
=#
    testarrayoftables::Vector{Monster{T}} = []
    enemy::Union{Monster{T}, Nothing} = nothing
    testnestedflatbuffer::Vector{UInt8} = []
    testempty::Union{Stat, Nothing} = nothing
    testbool::Bool = false
    testhashs32_fnv1::Int32 = 0
    testhashu32_fnv1::UInt32 = 0
    testhashs64_fnv1::Int64 = 0
    testhashu64_fnv1::UInt64 = 0
    testhashs32_fnv1a::Int32 = 0
    testhashu32_fnv1a::UInt32 = 0
    testhashs64_fnv1a::Int64 = 0
    testhashu64_fnv1a::UInt64 = 0
    testarrayofbools::Vector{Bool} = []
    testf::Float32 = 3.14159
    testf2::Float32 = 3.0
    testf3::Float32 = 0.0
    testarrayofstring2::Vector{String} = []
    testarrayofsortedstruct::Vector{Ability} = []
    flex::Vector{UInt8} = []
    test5::Vector{Test} = []
    vector_of_longs::Vector{Int64} = []
    vector_of_doubles::Vector{Float64} = []
    parent_namespace_test::Union{InParentNamespace, Nothing} = nothing
    vector_of_referrables::Vector{Referrable} = []
    single_weak_reference::UInt64 = 0
    vector_of_weak_references::Vector{UInt64} = []
    vector_of_strong_referrables::Vector{Referrable} = []
    co_owning_reference::UInt64 = 0
    vector_of_co_owning_references::Vector{UInt64} = []
    non_owning_reference::UInt64 = 0
    vector_of_non_owning_references::Vector{UInt64} = []
end
FlatBuffers.@ALIGN(Monster, 1)
FlatBuffers.offsets(::Type{T}) where {T<:Monster} = [4, 6, 8, 10, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88]

function Monster(buf::Vector{UInt8}, offset::Integer)
    FlatBuffers.read(Monster, buf, offset)
end

